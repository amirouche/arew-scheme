(import (scheme base) (scheme write)
        (scheme time))

;; (define (pk . args)
;;   (write args)
;;   (car (reverse args)))
(begin
 (define (pk . args)
   (write ";;; ")
   (write args)
   (newline)
   (car (reverse args)))
 (define void (lambda () (when #f #f)))
 (define (make-box v) (vector v))
 (define (unbox b) (vector-ref b 0))
 (define (box-set! b a) (vector-set! b 0 a))
 (define time current-jiffy)
 (define (print . args) (write args) (newline))
 (define (primcall proc . args) (apply proc args))
 (define (zero? x) (= x 0))
 (define (add a b) (+ a b))
 (define (sub a b) (- a b))
 ((lambda (r.1)
    (r.1
     (lambda (k.2)
       ((lambda (k.3)
          ((lambda (r.9)
             (r.9
              (lambda (k.10 wrap)
                ((lambda (k.11)
                   ((lambda (r.29)
                      (r.29
                       (lambda (k.30 i.0) (((primcall unbox wrap)) k.30))))
                    (lambda (p.12)
                      ((lambda (r.15)
                         (pk 'primcall box-set!)
                         (wrap
                          (lambda (v.16)
                            (pk 'uuuuuuuuuu box-set! v.16)
                            ((lambda (r.18)
                               (r.18
                                (lambda (k.19)
                                  ((lambda (k.20)
                                     ((lambda (r.25)
                                        (r.25
                                         (lambda (k.26 value)
                                           ((lambda (r.27)
                                              (r.27
                                               (lambda (k.28) (value k.28))))
                                            k.26))))
                                      (lambda (p.21)
                                        ((lambda (r.24) (r.24 "test"))
                                         (lambda (v.23)
                                           (p.21 k.20 (lambda (r) (r v.23))))))))
                                   k.19))))
                             (lambda (v.17)
                               (pk 'brrrrrrr box-set! v.17)
                               (r.15 (primcall box-set! v.16 v.17)))))))
                       (lambda (v.14) (p.12 k.11 (lambda (r) (r v.14))))))))
                 k.10))))
           (lambda (p.4)
             ((lambda (r.7)
                (pk 'primcall make-box)
                ((lambda (r) (r (primcall void)))
                 (lambda (v.8)
                   (pk 'brrrrrrr make-box v.8)
                   (r.7 (primcall make-box v.8)))))
              (lambda (v.6) (p.4 k.3 (lambda (r) (r v.6)))))))) k.2))))
  (lambda (r) (r pk))))
